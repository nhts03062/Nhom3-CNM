const express = require("express");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const nodemailer = require("nodemailer");
const User = require("../models/User");
require("dotenv").config();
const UserUtil = require('../utils/user-util')
const path = require("path");
const crypto = require("crypto");

const router = express.Router();

/**
 * üìå API ƒêƒÉng k√Ω
 */
router.post("/register", async (req, res) => {
  const { name, email, password } = req.body;

  try {
    // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
    let user = await User.findOne({ email });
    if (user) return res.status(400).json({ msg: "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng" });

    // M√£ h√≥a m·∫≠t kh·∫©u
    const hashedPassword = await bcrypt.hash(password, 10);
    user = new User({ name, email, password: hashedPassword, isVerified: false });

    await user.save();

    // T·∫°o token x√°c th·ª±c email
    const token = jwt.sign({ email }, process.env.JWT_SECRET, { expiresIn: "24h" });

    // Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng
    if (!process.env.EMAIL_USER || !process.env.EMAIL_PASS) {
      return res.status(500).json({ msg: "L·ªói c·∫•u h√¨nh email" });
    }

    // C·∫•u h√¨nh SMTP
    const transporter = nodemailer.createTransport({
      service: "gmail",
      host: "smtp.gmail.com",
      port: 465,
      secure: true,
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS,
      },
    });

    const mailOptions = {
      from: `"H·ªá th·ªëng" <${process.env.EMAIL_USER}>`,
      to: email,
      subject: "X√°c nh·∫≠n t√†i kho·∫£n",
      html: `
        <h3>Ch√†o ${name},</h3>
        <p>Nh·∫•n v√†o link d∆∞·ªõi ƒë√¢y ƒë·ªÉ x√°c th·ª±c t√†i kho·∫£n:</p>
        <a href="http://chat.fff3l.click/api/auth/verify?token=${encodeURIComponent(token)}">X√°c th·ª±c t√†i kho·∫£n</a>
      `,
    };

    // G·ª≠i email
    await transporter.sendMail(mailOptions);
    res.json({ msg: "ƒêƒÉng k√Ω th√†nh c√¥ng! H√£y ki·ªÉm tra email ƒë·ªÉ x√°c th·ª±c t√†i kho·∫£n." });

  } catch (error) {
    console.error(error);
    res.status(500).send("L·ªói server");
  }
});

/**
 * üìå API X√°c nh·∫≠n Email
 */
router.get("/verify", async (req, res) => {
  try {
    const { token } = req.query;
    const decoded = jwt.verify(token, process.env.JWT_SECRET);

    const user = await User.findOne({ email: decoded.email });
    if (!user) return res.status(400).json({ msg: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i x√°c th·ª±c
    user.isVerified = true;
    await user.save();

    res.redirect("http://localhost:4200/auth?verified=true");

  } catch (error) {
    console.error(error);
    res.status(400).json({ msg: "‚ùå X√°c th·ª±c th·∫•t b·∫°i ho·∫∑c token ƒë√£ h·∫øt h·∫°n" });
  }
});

/**
 * üìå API ƒêƒÉng nh·∫≠p
 */
router.post("/login", async (req, res) => {
  const { email, password } = req.body;

  try {
    const user = await User.findOne({ email }).populate("friends").populate("requestfriends").populate("friendRequestsReceived");
    if (!user) return res.status(400).json({ msg: "Email kh√¥ng t·ªìn t·∫°i" });

    if (!user.isVerified) return res.status(400).json({ msg: "Email ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c" });

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(400).json({ msg: "M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c" });

    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: "24h" });
    const userId = user._id;
    const userDaLoc = UserUtil.locUserRaIdNameAvatarRequestFriendFriend(user)
    console.log(userDaLoc)

    res.status(200).json({ msg: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!", redirect: "/dashboard.html", token, userDaLoc});

  } catch (error) {
    console.error(error);
    res.status(500).send("L·ªói server");
  }
});
//Ng∆∞·ªùi d√πng ·∫•n qu√™n m·∫≠t kh·∫©u hi·ªán ra form nh·∫≠p email.Ng∆∞·ªùi d√πng nh·∫≠p email v√† ·∫•n x√°c nh·∫≠n
//sau ƒë√≥ g·ªçi api /forgot-password cung c·∫•p email nh·∫≠n v·ªÅ roomId, sau khi c√≥ roomId th√¨ ng∆∞·ªùi d√πng s·ª≠ d√πng 
// socket join-reset-room(emit) ƒë·ªÉ tham gia ph√≤ng, ti·∫øp ƒë√≥ ng∆∞·ªùi d√πng m·ªü email v√† ·∫•n v√†o link email
//ng∆∞·ªùi d√πng s·∫Ω nh·∫≠n sk reset-password-verified(on) trong sk n√†y ng·ª´i dugn2 s·∫Ω nh·∫≠n dc userId
//sau khi c√≥ userId ng∆∞·ªùi d√πng s·∫Ω chuy·ªÉn trang nh·∫≠p m·∫≠t kh·∫©u, nh·∫≠p xong mk m·ªõi ·∫•n x√°c nh·∫≠n g·ªçi api /reset-password"
//cung c·∫•p userId v√† m·∫≠t kh·∫©u m·ªõi xong nh·∫≠n v·ªÅ status 200 v√† th√¥ng b√°o ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng oke th√¨ chuy·ªÉn
//trang ƒëƒÉng nh·∫≠p
/**
 * üìå API Qu√™n m·∫≠t kh·∫©u
 */
router.post("/forgot-password", async (req, res) => {
  const { email } = req.body;

  try {
    let user = await User.findOne({ email });
    if (!user) return res.status(400).json({ msg: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });

    // T·∫°o token qu√™n m·∫≠t kh·∫©u
    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: "15m" });

    const roomId = crypto.randomBytes(16).toString("hex"); // 32 k√Ω t·ª± hex
    // redisClient.setex(roomId, 900, user._id.toString()); // L∆∞u 15 ph√∫t

    // G·ª≠i email
    const transporter = nodemailer.createTransport({
      service: "gmail",
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS,
      },
    });

    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: email,
      subject: "Y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u",
      html: `
        <h3>Ch√†o ${user.name},</h3>
        <p>Nh·∫•n v√†o link d∆∞·ªõi ƒë√¢y ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:</p>
        <a href="http://chat.fff3l.click/api/auth/verify-reset-password?token=${token}&room=${roomId}">ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</a>
      `,
    };

    await transporter.sendMail(mailOptions);
    // T·∫°o m√£ ph√≤ng t·∫°m khi g·ª≠i email
    
    res.status(200).json({ roomId });

  } catch (error) {
    console.error(error);
    res.status(500).send("L·ªói server qu√™n m·∫≠t kh·∫©u");
  }
});

/**
 * üìå API x√°c th·ª±c qu√™n m·∫≠t kh·∫©u
 */
router.get("/verify-reset-password", async (req, res) => {
    const { token } = req.query;

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    // Ki·ªÉm tra userId c√≥ t·ªìn t·∫°i hay kh√¥ng
    const user = await User.findById(decoded.id);
    
    if (!user) {
      return res.sendFile(path.join(__dirname, '../public/invalid-token.html'));
    }

    // N·∫øu h·ª£p l·ªá ‚Üí tr·∫£ v·ªÅ trang HTML x√°c nh·∫≠n
    // Ch√∫ √Ω: thay ƒë·ªïi t·ª´ verify.html th√†nh verified.html ƒë·ªÉ kh·ªõp v·ªõi file th·ª±c t·∫ø
    // res.sendFile(path.join(__dirname, '../public/verified.html'));

     // Redirect v·ªÅ frontend app v·ªõi token v√† room
    return res.redirect(`http://localhost:4200/auth/change-password?token=${encodeURIComponent(token)}`);

  } catch (err) {
    console.error("L·ªói x√°c th·ª±c:", err);
    // Token kh√¥ng h·ª£p l·ªá ho·∫∑c h·∫øt h·∫°n
    res.sendFile(path.join(__dirname, '../public/invalid-token.html'));
  }
});
/**
 * api x√°c th·ª±c token
 */
router.post("/verify-token", async (req, res) => {
  const { token } = req.body;

  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET);
    const user = await User.findById(decoded.id);

    if (!user) return res.status(404).json({ msg: "User kh√¥ng t·ªìn t·∫°i" });
    console.log('ƒê√£ x√°c th·ª±c token cho user',user)
    res.status(200).json({ userId: user._id });
  } catch (err) {
    res.status(400).json({ msg: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n" });
  }
});

/**
 * api ƒë·∫≠t l·∫°i m·∫≠t kh·∫©u
 */
router.post("/reset-password", async (req, res) => {
  const { userId, newPassword } = req.body;

  try {
    const hashedPassword = await bcrypt.hash(newPassword, 10);
    await User.findByIdAndUpdate(userId, { password: hashedPassword });

    res.status(200).json({ msg: "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng" });
  } catch (error) {
    console.error(error);
    res.status(500).send("L·ªói server");
  }
});



module.exports = router;
