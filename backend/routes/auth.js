const express = require("express");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const nodemailer = require("nodemailer");
const User = require("../models/User");
require("dotenv").config();
const UserUtil = require('../utils/user-util')

const router = express.Router();

/**
 * üìå API ƒêƒÉng k√Ω
 */
router.post("/register", async (req, res) => {
  const { name, email, password } = req.body;

  try {
    // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
    let user = await User.findOne({ email });
    if (user) return res.status(400).json({ msg: "Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng" });

    // M√£ h√≥a m·∫≠t kh·∫©u
    const hashedPassword = await bcrypt.hash(password, 10);
    user = new User({ name, email, password: hashedPassword, isVerified: false });

    await user.save();

    // T·∫°o token x√°c th·ª±c email
    const token = jwt.sign({ email }, process.env.JWT_SECRET, { expiresIn: "24h" });

    // Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng
    if (!process.env.EMAIL_USER || !process.env.EMAIL_PASS) {
      return res.status(500).json({ msg: "L·ªói c·∫•u h√¨nh email" });
    }

    // C·∫•u h√¨nh SMTP
    const transporter = nodemailer.createTransport({
      service: "gmail",
      host: "smtp.gmail.com",
      port: 465,
      secure: true,
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS,
      },
    });

    const mailOptions = {
      from: `"H·ªá th·ªëng" <${process.env.EMAIL_USER}>`,
      to: email,
      subject: "X√°c nh·∫≠n t√†i kho·∫£n",
      html: `
        <h3>Ch√†o ${name},</h3>
        <p>Nh·∫•n v√†o link d∆∞·ªõi ƒë√¢y ƒë·ªÉ x√°c th·ª±c t√†i kho·∫£n:</p>
        <a href="http://localhost:5000/api/auth/verify?token=${encodeURIComponent(token)}">X√°c th·ª±c t√†i kho·∫£n</a>
      `,
    };

    // G·ª≠i email
    await transporter.sendMail(mailOptions);
    res.json({ msg: "ƒêƒÉng k√Ω th√†nh c√¥ng! H√£y ki·ªÉm tra email ƒë·ªÉ x√°c th·ª±c t√†i kho·∫£n." });

  } catch (error) {
    console.error(error);
    res.status(500).send("L·ªói server");
  }
});

/**
 * üìå API X√°c nh·∫≠n Email
 */
router.get("/verify", async (req, res) => {
  try {
    const { token } = req.query;
    const decoded = jwt.verify(token, process.env.JWT_SECRET);

    const user = await User.findOne({ email: decoded.email });
    if (!user) return res.status(400).json({ msg: "Token kh√¥ng h·ª£p l·ªá ho·∫∑c ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i x√°c th·ª±c
    user.isVerified = true;
    await user.save();

    res.redirect("http://localhost:4200/auth?verified=true");

  } catch (error) {
    console.error(error);
    res.status(400).json({ msg: "‚ùå X√°c th·ª±c th·∫•t b·∫°i ho·∫∑c token ƒë√£ h·∫øt h·∫°n" });
  }
});

/**
 * üìå API ƒêƒÉng nh·∫≠p
 */
router.post("/login", async (req, res) => {
  const { email, password } = req.body;

  try {
    const user = await User.findOne({ email }).populate("friends").populate("requestfriends").populate("friendRequestsReceived");
    if (!user) return res.status(400).json({ msg: "Email kh√¥ng t·ªìn t·∫°i" });

    if (!user.isVerified) return res.status(400).json({ msg: "Email ch∆∞a ƒë∆∞·ª£c x√°c th·ª±c" });

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(400).json({ msg: "M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c" });

    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: "24h" });
    const userId = user._id;
    const userDaLoc = UserUtil.locUserRaIdNameAvatarRequestFriendFriend(user)
    console.log(userDaLoc)

    res.status(200).json({ msg: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng!", redirect: "/dashboard.html", token, userDaLoc });

  } catch (error) {
    console.error(error);
    res.status(500).send("L·ªói server");
  }
});

module.exports = router;
